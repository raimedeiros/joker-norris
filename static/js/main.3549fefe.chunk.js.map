{"version":3,"sources":["redux/catActions.js","components/Categories.js","pages/Home.js","components/Navigator.js","redux/jokeActions.js","pages/Joke.js","AppRouter.js","serviceWorker.js","redux/catReducer.js","redux/jokeReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["catActions","categoria","type","payload","Categories","state","categories","item","this","props","dispatch","_this2","react_default","a","createElement","react","className","map","key","react_router_dom","to","onClick","setCategory","_this3","fetch","then","res","json","data","setState","catch","console","log","Component","connect","store","Home","alt","src","components_Categories","Navigator","jokeActions","created","icon","value","Joke","joke","created_at","icon_url","_this","jokeItem","dist_default","format","getJoke","setJoke","App","basename","react_router","path","exact","component","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","createStore","WebFont","load","google","families","ReactDOM","render","es","AppRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3549fefe.chunk.js","sourcesContent":["//export const SET_CAT = 'SET_CATEGORIA';\n\nexport default {\n  setCategoria(categoria) {\n    return {\n      type: 'SET_CATEGORIA', payload: categoria\n    }\n  }\n}","import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport catActions from '../redux/catActions';\nimport { connect } from 'react-redux';\n\nclass Categories extends Component {\n  setCategory(item) {\n    this.props.dispatch(catActions.setCategoria(item))\n  }\n  render() {\n    return (\n      <Fragment>\n        <div className=\"row text-center\">\n          <div className=\"col-12 col-md-8 card\">\n            <div className=\"title-card\">\n              <h2>Escolha uma categoria</h2>\n            </div>\n            <div className=\"content-card\">\n              <div className=\"row\">\n                {this.state.categories.map(item => (\n                  <div key={item} className=\"col-6 col-md-4 text-center\">\n                    <Link className=\"link-category\" to='/joke/' onClick={() => this.setCategory(item)}>{item}</Link>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n\n  state = {\n    categories: []\n  }\n\n  componentDidMount() {\n    fetch('https://api.chucknorris.io/jokes/categories')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ categories: data })\n      })\n      .catch(console.log)\n  }\n}\n\nexport default connect(store => ({ categoria: store.categoria }))(Categories)\n","import React, { Fragment } from 'react'\nimport Categories from '../components/Categories'\n\nconst Home = () => (\n  <Fragment>\n    <div className=\"header-block text-center\">\n      <img alt=\"Chuck Norris icon\" src=\"https://assets.chucknorris.host/img/avatar/chuck-norris.png\"></img>\n      <h1>\n        <span>Hey Norris,</span>\n        <span>make a joke!</span>\n      </h1>\n    </div>\n    <Categories></Categories>\n  </Fragment>\n)\n\nexport default Home;","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default () => (\n  <div className='navigator'>\n    <Link to='/'>\t&#60; </Link>\n  </div>\n)","//export const SET_CAT = 'SET_CATEGORIA';\n\nexport default {\n  setJoke(created, icon, value, categories) {\n    return {\n      type: 'SET_JOKE', created, icon, value, categories\n    }\n  }\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Moment from 'react-moment'\nimport Navigator from '../components/Navigator'\nimport jokeActions from '../redux/jokeActions';\n\nconst url_api = 'https://api.chucknorris.io/jokes/random?category='\n\nclass Joke extends Component {\n  setJoke(item) {\n    item = item.joke\n    this.props.dispatch(jokeActions.setJoke(item.created_at, item.icon_url, item.value, item.categories))\n  }\n  render() {\n    return (\n      <div className=\"joke-block\">\n        <Navigator></Navigator>\n        <div className=\"row text-center\">\n          <div className=\"col-12 col-md-8 card\">\n            <img alt=\"Ã­cone\" src={this.props.jokeItem.icon}></img>\n            <div className=\"title-card\">\n              <h2><i>Joke</i></h2>\n            </div>\n            <div className=\"content-card\">\n              <p className=\"joke-content\">{this.props.jokeItem.value}</p>\n              <p><i>Created on: </i>\n                <Moment format=\"DD/MM/YYYY\">{(this.props.jokeItem.created)}</Moment><br />\n              </p>\n              <p className=\"text-right\"><small>Categories: {this.props.jokeItem.categories}</small></p>\n            </div>\n            <div className='footer-card'>\n              <p className='carregar-outra' onClick={() => this.getJoke()}>Carregar outra</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.getJoke()\n  }\n  getJoke() {\n    fetch(url_api + (this.props.categoria.categoria ? this.props.categoria.categoria : 'animal'))\n      .then(res => res.json())\n      .then((data) => {\n        // this.setState({ joke: data })\n        this.setJoke({ joke: data })\n      })\n      .catch(console.log)\n  }\n}\nexport default connect(store => ({ categoria: store.categoria, jokeItem: store.joke }))(Joke)","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from './pages/Home'\nimport Joke from './pages/Joke'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Router basename='/joker-norris'>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path='/joke/' component={Joke} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = { categoria: '' }\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case 'SET_CATEGORIA':\n      return { ...state, categoria: action.payload }\n    default:\n      return state\n  }\n}","const initialState = { created: 'created', icon: 'icon', value: 'value', categories: [] }\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case 'SET_JOKE':\n      return { ...state, created: action.created, icon: action.icon, value: action.value, categories: action.categories }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport catReducer from './catReducer'\nimport jokeReducer from './jokeReducer';\n\nconst rootReducer = combineReducers({\n  categoria: catReducer,\n  joke: jokeReducer\n})\n\nexport default rootReducer","import { createStore } from 'redux'\nimport rootReducer from './rootReducer';\n\nexport default createStore(rootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppRouter from './AppRouter';\nimport * as serviceWorker from './serviceWorker';\nimport './app.css'\nimport WebFont from 'webfontloader'\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\nWebFont.load({\n  google: {\n    families: ['Dosis:400,500', 'sans-serif']\n  }\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <div className=\"app container-fluid\">\n      <AppRouter />\n    </div>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}